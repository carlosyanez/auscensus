[{"path":"/articles/getting_data.html","id":"figuring-out-what-to-retrieve","dir":"Articles","previous_headings":"","what":"Figuring out what to retrieve","title":"Auscensus - Getting Data","text":"first thing figure data points going retrieved. order answer , following questions need answered: statistics want pull, .e. data point table? geographical structure want (e.g. SAs, LGAs, electorates)? want data just handful? years want data? answer questions, {auscensus} comes family functions, starting list_. figure data point retrieve, first step retrieve list available tables, return code plus year published. can achieved list_census_tables() function comes two -built filters. first one allows filtering table number, whereas second uses regular expression filter table names Please note even though table names changed year year, tables number contain data. table selected, list_census_attributes() can used select data point. Since tables can contain many attributes, thus function also allows filtering results regular expression. instance, pick table 04 (Age Sex) want find data points 60-year-olds, plus total, can use command. get geographical structures available, list_census_geo_types() can help. selected appropriate value, list_census_geo() can used search particular divisions. example , confirming data available three inner-Melbourne Local Government areas. Please note functions show data available data packs - file imported, associated year won’t presented results.","code":"list_census_tables() #> # A tibble: 165 × 7 #>    Number `Table Name`                                                            `Table Population`                   `2021` `2016` `2011` `2006` #>    <chr>  <chr>                                                                   <chr>                                <lgl>  <lgl>  <lgl>  <lgl>  #>  1 01     Selected Person Characteristics by Sex                                  Persons                              TRUE   TRUE   TRUE   NA     #>  2 01     Selected Person Characteristics by Sex (First Release Processing)       Persons                              NA     NA     NA     TRUE   #>  3 02     Selected Medians and Averages                                           NA                                   TRUE   TRUE   TRUE   TRUE   #>  4 03     Place of Usual Residence by Place of Enumeration on Census Night by Age Persons (excludes overseas visitors) TRUE   NA     NA     NA     #>  5 03     Place of Usual Residence on Census Night by Age                         Persons                              NA     TRUE   TRUE   TRUE   #>  6 04     Age by Sex                                                              Persons                              TRUE   TRUE   TRUE   TRUE   #>  7 05     Registered Marital Status by Age by Sex                                 Persons aged 15 years and over       TRUE   TRUE   TRUE   TRUE   #>  8 06     Social Marital Status by Age by Sex                                     Persons aged 15 years and over       TRUE   TRUE   TRUE   TRUE   #>  9 07     Indigenous Status by Age by Sex                                         Persons                              TRUE   TRUE   TRUE   TRUE   #> 10 08     Ancestry by Country of Birth of Parents                                 Responses and persons                TRUE   TRUE   NA     TRUE   #> # … with 155 more rows list_census_tables(\"20\") #> # A tibble: 4 × 7 #>   Number `Table Name`                                                  `Table Population`             `2021` `2016` `2011` `2006` #>   <chr>  <chr>                                                         <chr>                          <lgl>  <lgl>  <lgl>  <lgl>  #> 1 20     Count of Selected Long-Term Health Conditions by Age by Sex   Persons                        TRUE   NA     NA     NA     #> 2 20     Unpaid Domestic Work:  Number of House by Age by Sex          Persons aged 15 years and over NA     TRUE   NA     NA     #> 3 20     Unpaid Domestic Work:  Number of Hours by Age by Sex          Persons aged 15 years and over NA     NA     TRUE   NA     #> 4 20     Unpaid Assistance to a Person with a Disability by Age by Sex Persons aged 15 years and over NA     NA     NA     TRUE list_census_tables(table_name_regex = \"[Cc]ountry\") #> # A tibble: 6 × 7 #>   Number `Table Name`                                                                    `Table Population`    `2021` `2016` `2006` `2011` #>   <chr>  <chr>                                                                           <chr>                 <lgl>  <lgl>  <lgl>  <lgl>  #> 1 08     Ancestry by Country of Birth of Parents                                         Responses and persons TRUE   TRUE   TRUE   NA     #> 2 09     Country of Birth of Person by Age by Sex                                        Persons               TRUE   TRUE   NA     NA     #> 3 09     Country of Birth of Person by Sex                                               Persons               NA     NA     TRUE   TRUE   #> 4 10     Country of Birth of Person by Year of Arrival in Australia                      Persons born overseas TRUE   TRUE   TRUE   TRUE   #> 5 26     Family Composition and Country of Birth of Parents by Age of Dependent Children Dependent children    NA     TRUE   NA     NA     #> 6 30     Family Composition and Country of Birth of Parents by Age of Dependent Children Dependent children    TRUE   NA     NA     NA list_census_attributes(number=\"04\",attribute_regex = \"60|[Tt]otal\") #> # A tibble: 15 × 6 #>    Table Attribute                        `2021` `2016` `2011` `2006` #>    <chr> <chr>                            <lgl>  <lgl>  <lgl>  <lgl>  #>  1 04    Age_years_60_males               TRUE   TRUE   TRUE   NA     #>  2 04    Age_years_60_females             TRUE   TRUE   TRUE   NA     #>  3 04    Age_years_60_persons             TRUE   TRUE   TRUE   NA     #>  4 04    Age_years_60_64_years_males      TRUE   TRUE   TRUE   NA     #>  5 04    Age_years_60_64_years_females    TRUE   TRUE   TRUE   NA     #>  6 04    Age_years_60_64_years_persons    TRUE   TRUE   TRUE   NA     #>  7 04    Total_males                      TRUE   TRUE   TRUE   TRUE   #>  8 04    Total_females                    TRUE   TRUE   TRUE   TRUE   #>  9 04    Total_persons                    TRUE   TRUE   TRUE   TRUE   #> 10 04    Age (Years): 60_males            NA     NA     NA     TRUE   #> 11 04    Age (Years): 60_females          NA     NA     NA     TRUE   #> 12 04    Age (Years): 60_persons          NA     NA     NA     TRUE   #> 13 04    Age (Years): 60-64 Years_males   NA     NA     NA     TRUE   #> 14 04    Age (Years): 60-64 Years_females NA     NA     NA     TRUE   #> 15 04    Age (Years): 60-64 Years_persons NA     NA     NA     TRUE list_census_geo_types() #> # A tibble: 31 × 5 #>    ASGS_Structure `2021` `2016` `2011` `2006` #>    <chr>          <lgl>  <lgl>  <lgl>  <lgl>  #>  1 AUS            TRUE   TRUE   TRUE   TRUE   #>  2 CD             NA     NA     NA     TRUE   #>  3 CED            TRUE   TRUE   TRUE   TRUE   #>  4 GCCSA          TRUE   TRUE   TRUE   NA     #>  5 IARE           TRUE   TRUE   TRUE   TRUE   #>  6 ILOC           TRUE   TRUE   TRUE   TRUE   #>  7 IREG           TRUE   TRUE   TRUE   TRUE   #>  8 JWSLA          NA     NA     NA     TRUE   #>  9 JWSLA_extended NA     NA     NA     TRUE   #> 10 LGA            TRUE   TRUE   TRUE   TRUE   #> # … with 21 more rows list_census_geo(\"LGA\",geo_name_regex = \"[Mm]elbourne|[Ss]tonnington|Yarra\") #> # A tibble: 5 × 6 #>   ASGS_Structure Census_Name  `2021` `2016` `2011` `2006` #>   <chr>          <chr>        <lgl>  <lgl>  <lgl>  <lgl>  #> 1 LGA            Melbourne    TRUE   TRUE   TRUE   TRUE   #> 2 LGA            Stonnington  TRUE   TRUE   TRUE   TRUE   #> 3 LGA            Yarra        TRUE   TRUE   TRUE   TRUE   #> 4 LGA            Yarra Ranges TRUE   TRUE   TRUE   TRUE   #> 5 LGA            Yarrabah     TRUE   TRUE   TRUE   TRUE"},{"path":"/articles/getting_data.html","id":"retrieving-census-data","dir":"Articles","previous_headings":"","what":"Retrieving Census Data","title":"Auscensus - Getting Data","text":"questions resolved, possible use {auscensus} retrieve data get_census_data(). function present result {table, year, geography} combination different element within list. default function return data parquet binding function - can changes setting collect_data = TRUE. example: Note: mindful tables quite large! default, command store table parquet file cache directory want stop happening use argument cache=FALSE. Similarly, default behaviour read data cached files extracting data pack. want ignore cache, use ignore_cache=TRUE.","code":"data <- get_census_data(census_table = list_census_tables(\"04\"),                         geo_structure = \"LGA\",                         collect_data = TRUE) #> ERROR : [EBUSY] Failed to remove 'C:/Users/carlo/OneDrive/Documents/.auscensus_cache/LGA_Vic_B04_A.csv': resource busy or locked  #> ERROR : [EBUSY] Failed to remove 'C:/Users/carlo/OneDrive/Documents/.auscensus_cache/2011Census_B04A_AUST_LGA_short.csv': resource busy or locked  #> ERROR : [EBUSY] Failed to remove 'C:/Users/carlo/OneDrive/Documents/.auscensus_cache/2016Census_G04A_AUS_LGA.csv': resource busy or locked  #> ERROR : [EBUSY] Failed to remove 'C:/Users/carlo/OneDrive/Documents/.auscensus_cache/2021Census_G04A_AUST_LGA.csv': resource busy or locked    names(data)    #> [1] \"2006_LGA_B04\" \"2011_LGA_B04\" \"2016_LGA_G04\" \"2021_LGA_G04\" data$`2006_LGA_B04` #> # A tibble: 685 × 309 #>     Year Census_Code Unit  Age (…¹ Age (…² Age (…³ Age (…⁴ Age (…⁵ Age (…⁶ Age (…⁷ Age (…⁸ Age (…⁹ Age (…˟ Age (…˟ Age (…˟ Age (…˟ Age (…˟ Age (…˟ Age (…˟ #>    <dbl> <chr>       <chr>   <int>   <int>   <int>   <int>   <int>   <int>   <int>   <int>   <int>   <int>   <int>   <int>   <int>   <int>   <int>   <int> #>  1  2006 LGA89399    Unin…    2121    9798   10282   20080    2214    4335   10436   21360      16       7   10924      23    2021    2068    4089    2094 #>  2  2006 LGA89499    No U…       4      21      26      47       6      10      18      26       0       0       8       0       3       0       3       3 #>  3  2006 LGA10050    Albu…     305    1490    1524    3014     337     642    1675    3422       8       4    1747      12     305     326     631     357 #>  4  2006 LGA10110    Armi…     144     660     704    1364     137     281     910    1809       0       0     899       0     163     157     320     173 #>  5  2006 LGA10150    Ashf…     246    1048    1162    2210     265     511     943    1910      14       0     967      14     199     201     400     171 #>  6  2006 LGA10200    Aubu…     562    2383    2516    4899     541    1103    2049    4223       0       5    2174       5     420     451     871     434 #>  7  2006 LGA10250    Ball…     197     997    1015    2012     191     388    1370    2754       7       0    1384       7     256     273     529     246 #>  8  2006 LGA10300    Balr…      16      76      87     163       8      24      82     175       0       0      93       0      15      15      30      18 #>  9  2006 LGA10350    Bank…    1240    6130    6578   12708    1331    2571    5957   12425      14       3    6468      17    1202    1257    2459    1189 #> 10  2006 LGA10470    Bath…     227    1115    1240    2355     276     503    1272    2609       6       0    1337       6     243     254     497     234 #> # … with 675 more rows, 290 more variables: `Age (Years) 11_males` <int>, `Age (Years) 11_persons` <int>, `Age (Years) 12_females` <int>, #> #   `Age (Years) 12_males` <int>, `Age (Years) 12_persons` <int>, `Age (Years) 13_females` <int>, `Age (Years) 13_males` <int>, #> #   `Age (Years) 13_persons` <int>, `Age (Years) 14_females` <int>, `Age (Years) 14_males` <int>, `Age (Years) 14_persons` <int>, #> #   `Age (Years) 15-19 Years_females` <int>, `Age (Years) 15-19 Years_males` <int>, `Age (Years) 15-19 Years_persons` <int>, #> #   `Age (Years) 15_females` <int>, `Age (Years) 15_males` <int>, `Age (Years) 15_persons` <int>, `Age (Years) 16_females` <int>, #> #   `Age (Years) 16_males` <int>, `Age (Years) 16_persons` <int>, `Age (Years) 17_females` <int>, `Age (Years) 17_males` <int>, #> #   `Age (Years) 17_persons` <int>, `Age (Years) 18_females` <int>, `Age (Years) 18_males` <int>, `Age (Years) 18_persons` <int>, …"},{"path":"/articles/getting_data.html","id":"getting-ready-to-use-summaries","dir":"Articles","previous_headings":"","what":"Getting ready to use summaries","title":"Auscensus - Getting Data","text":"Although get_census_data(), provides great flexibility data processing, cases, just interest get just table limited number variables analysis. purpose, package provides get_census_summary(). instance, interested getting numbers 60-year-olds LGA 2021 census (see ), can use: Finally, function contains two parameters interest: geo_units filters results giving vector names; reference_total passes function vector names another attribute used “total” value calculate attributes percentage said total value. instance, want narrow results LGAs Melbourne, Stonnington Yarra, present results percentage total population, :","code":"get_census_summary(table_number = \"04\",                    attribute = list(\"60 year old male\"=c(\"Age_years_60_males\",\"Age (Years): 60_males\"),                                      \"60 year old female\"=c(\"Age_years_60_males\",\"Age (Years): 60_females\")),                    geo_structure = \"LGA\") #> ERROR : [EBUSY] Failed to remove 'C:/Users/carlo/OneDrive/Documents/.auscensus_cache/LGA_Vic_B04_A.csv': resource busy or locked  #> ERROR : [EBUSY] Failed to remove 'C:/Users/carlo/OneDrive/Documents/.auscensus_cache/2011Census_B04A_AUST_LGA_short.csv': resource busy or locked  #> ERROR : [EBUSY] Failed to remove 'C:/Users/carlo/OneDrive/Documents/.auscensus_cache/2016Census_G04A_AUS_LGA.csv': resource busy or locked  #> ERROR : [EBUSY] Failed to remove 'C:/Users/carlo/OneDrive/Documents/.auscensus_cache/2021Census_G04A_AUST_LGA.csv': resource busy or locked #> # A tibble: 3,075 × 5 #>    Census_Code Unit               Year Attribute          Value #>    <chr>       <chr>             <dbl> <chr>              <int> #>  1 LGA10050    Albury             2006 60 year old female   217 #>  2 LGA10050    Albury             2006 60 year old male     229 #>  3 LGA10110    Armidale Dumaresq  2006 60 year old female   122 #>  4 LGA10110    Armidale Dumaresq  2006 60 year old male     112 #>  5 LGA10150    Ashfield           2006 60 year old female   157 #>  6 LGA10150    Ashfield           2006 60 year old male     164 #>  7 LGA10200    Auburn             2006 60 year old female   210 #>  8 LGA10200    Auburn             2006 60 year old male     283 #>  9 LGA10250    Ballina            2006 60 year old female   217 #> 10 LGA10250    Ballina            2006 60 year old male     230 #> # … with 3,065 more rows get_census_summary(table_number = \"04\",                    attribute = list(\"60 year old male\"=c(\"Age_years_60_males\",\"Age (Years): 60_males\"),                                      \"60 year old female\"=c(\"Age_years_60_males\",\"Age (Years): 60_females\")),                    geo_unit_names  = c(\"Melbourne\",\"Stonnington\",\"Yarra\"),                    reference_total = list(\"Total\"=c(\"Total_persons\")),                    geo_structure = \"LGA\") #> ERROR : [EBUSY] Failed to remove 'C:/Users/carlo/OneDrive/Documents/.auscensus_cache/2016Census_G04A_AUS_LGA.csv': resource busy or locked  #> ERROR : [EBUSY] Failed to remove 'C:/Users/carlo/OneDrive/Documents/.auscensus_cache/LGA_Vic_B04_A.csv': resource busy or locked  #> ERROR : [EBUSY] Failed to remove 'C:/Users/carlo/OneDrive/Documents/.auscensus_cache/2011Census_B04A_AUST_LGA_short.csv': resource busy or locked  #> ERROR : [EBUSY] Failed to remove 'C:/Users/carlo/OneDrive/Documents/.auscensus_cache/2016Census_G04A_AUS_LGA.csv': resource busy or locked  #> ERROR : [EBUSY] Failed to remove 'C:/Users/carlo/OneDrive/Documents/.auscensus_cache/2021Census_G04A_AUST_LGA.csv': resource busy or locked #> # A tibble: 15 × 7 #>    Census_Code Unit         Year Attribute          Value  Total Percentage #>    <chr>       <chr>       <dbl> <chr>              <int>  <int>      <dbl> #>  1 LGA24600    Melbourne    2006 60 year old female   234  71380    0.00328 #>  2 LGA24600    Melbourne    2006 60 year old male     306  71380    0.00429 #>  3 LGA26350    Stonnington  2006 60 year old female   498  89882    0.00554 #>  4 LGA26350    Stonnington  2006 60 year old male     473  89882    0.00526 #>  5 LGA27350    Yarra        2006 60 year old female   295  69330    0.00426 #>  6 LGA27350    Yarra        2006 60 year old male     266  69330    0.00384 #>  7 LGA24600    Melbourne    2011 60 year old male     313  93626    0.00334 #>  8 LGA26350    Stonnington  2011 60 year old male     431  93145    0.00463 #>  9 LGA27350    Yarra        2011 60 year old male     332  74090    0.00448 #> 10 LGA24600    Melbourne    2016 60 year old male     379 135959    0.00279 #> 11 LGA26350    Stonnington  2016 60 year old male     444 103832    0.00428 #> 12 LGA27350    Yarra        2016 60 year old male     375  86657    0.00433 #> 13 LGA24600    Melbourne    2021 60 year old male     492 149615    0.00329 #> 14 LGA26350    Stonnington  2021 60 year old male     528 104703    0.00504 #> 15 LGA27350    Yarra        2021 60 year old male     425  90114    0.00472"},{"path":"/articles/getting_data.html","id":"creating-attributes-list","dir":"Articles","previous_headings":"","what":"Creating attributes list","title":"Auscensus - Getting Data","text":"Sometimes lists attributes can big, consolidating multiple statistics one category (.e. aggregate places birth continent). facilitate process, attribute_tibble_to_list() can take two first columns data frame convert desired format:","code":"attributes <- tribble(~Census_stat, ~ Group,                      \"Age_years_60_males\",\"60 year old male\",                      \"Age (Years): 60_males\",\"60 year old male\",                      \"Age_years_60_males\",\"60 year old female\",                     \"Age (Years): 60_females\",\"60 year old female\")  attribute_tibble_to_list(attributes) #> $`60 year old male` #> [1] \"Age_years_60_males\"    \"Age (Years): 60_males\" #>  #> $`60 year old female` #> [1] \"Age_years_60_males\"      \"Age (Years): 60_females\""},{"path":"/articles/setup.html","id":"download-the-data","dir":"Articles","previous_headings":"","what":"Download the data","title":"Auscensus - Setup","text":"first step get {auscensus} ready work download census data packs. Although package contains function (data_census_download()), recommended download files manually (due large size). Data packs come multiple formats - package designed specific versions, please download versions shown (can retrieve links using census_datapacks()). can download files interested particular census.","code":"census_datapacks() #> # A tibble: 4 × 3 #>   Census url                                                                                                                           type  #>    <dbl> <chr>                                                                                                                         <chr> #> 1   2021 https://www.abs.gov.au/census/find-census-data/datapacks/download/2021_GCP_all_for_AUS_short-header.zip                       GCP   #> 2   2016 https://www.abs.gov.au/census/find-census-data/datapacks/download/2016_GCP_all_for_AUS_short-header.zip                       GCP   #> 3   2011 https://www.abs.gov.au/census/find-census-data/datapacks/download/2011_BCP_all_for_AUST_short-header.zip                      BCP   #> 4   2006 https://www.abs.gov.au/AUSSTATS/abs@archive.nsf/LookupAttach/2006CensusDataPack_BCPPublication04.11.200/$file/census06bcp.zip BCP"},{"path":"/articles/setup.html","id":"cache-folder","dir":"Articles","previous_headings":"","what":"Cache folder","title":"Auscensus - Setup","text":"Upon load, package create folder store imported, downloaded cached files. can find location running find_cache() Sys.getenv(“auscensus_cache_dir”). want use cache different environments (.e. using {renv}), can via Sys.setenv() usethis::edit_r_environ().","code":""},{"path":"/articles/setup.html","id":"importing-the-data","dir":"Articles","previous_headings":"","what":"Importing the data","title":"Auscensus - Setup","text":"downloaded data files, can import cache folder using data_census_import() - just provide vector full path data pack zip files.","code":""},{"path":"/articles/setup.html","id":"managing-the-cache","dir":"Articles","previous_headings":"","what":"Managing the cache","title":"Auscensus - Setup","text":"mentioned , cache contain: Imported data packs Metadata parquet files, used assist data retrieval. Cache queries (easy use), parquet format (see article). keep eye size cache, can use data_census_info() want delete files, can use data_census_delete(). command accept vector path names (can get data_census_info()). argument provided, delete files cache.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Carlos Yáñez Santibáñez. Author, maintainer. Craig Alexander. Thesis advisor. Kyle Walker. Copyright holder. Australian Bureau Statistics. Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Yáñez Santibáñez C (2023). auscensus: Access Australian Census Data (2006-2021). R package version 0.0.1.0010, https://carlosyanez.github.io/auscensus/.","code":"@Manual{,   title = {auscensus: Access Australian Census Data (2006-2021)},   author = {Carlos {Yáñez Santibáñez}},   year = {2023},   note = {R package version 0.0.1.0010},   url = {https://carlosyanez.github.io/auscensus/}, }"},{"path":"/index.html","id":"auscensus","dir":"","previous_headings":"","what":"auscensus","title":"auscensus","text":"auscensus provides way read data Australian Bureau Statistics Data Packs. motivation behind package able easily pull data points multiple geographic structures different censuses. Currently, package works well ABS data packs 2011 2021.","code":""},{"path":"/index.html","id":"installation-and-pre-requisites","dir":"","previous_headings":"","what":"Installation and pre-requisites","title":"auscensus","text":"current version package (0.0.1.0000) yet CRAN. install package, can download GitHub: Alternatively, install r-universe:","code":"devtools::install_github(\"carlosyanez/auscensus\") # Enable this universe options(repos = c(     carlosyanez = 'https://carlosyanez.r-universe.dev',     CRAN = 'https://cloud.r-project.org'))  # Install some packages install.packages('auscensus')"},{"path":"/index.html","id":"how-to-use","dir":"","previous_headings":"","what":"How to use.","title":"auscensus","text":"package provides series functions access different censuses. reference check articles.","code":""},{"path":"/index.html","id":"attention---batteries-not-included","dir":"","previous_headings":"","what":"ATTENTION - BATTERIES NOT INCLUDED!","title":"auscensus","text":"Please note package made interact Census Data Packs include . get started, please follow article.","code":""},{"path":"/index.html","id":"issues-bugs-ideas","dir":"","previous_headings":"","what":"Issues? bugs? Ideas?","title":"auscensus","text":"find something quite right, please post issue. ideas, requests, want contribute, please let know!","code":""},{"path":"/index.html","id":"credits","dir":"","previous_headings":"","what":"Credits","title":"auscensus","text":"Data sourced directly Australian Bureau Statistics. Historical results Commonwealth elections published AEC’s Tally Room archive. functions use code written {tigris} package, maintained Kyle Walker. Census icons created noomtah - Flaticon.","code":""},{"path":"/index.html","id":"acknowledgment-of-country","dir":"","previous_headings":"","what":"Acknowledgment of Country","title":"auscensus","text":"author package acknowledges Boonwurrung/Bunurong Wurrundjeri Woi Wurrung peoples Eastern Kulin Nation Traditional Owners Custodians land package created, pays respect Elders past, present emerging.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 auspol authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/attribute_tibble_to_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to convert attributes to list — attribute_tibble_to_list","title":"Helper function to convert attributes to list — attribute_tibble_to_list","text":"Little helper function converts tibble list vectors, expected attributes input get_census_summary()","code":""},{"path":"/reference/attribute_tibble_to_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to convert attributes to list — attribute_tibble_to_list","text":"","code":"attribute_tibble_to_list(df, original = colnames(df)[1], new = colnames(df)[2])"},{"path":"/reference/attribute_tibble_to_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to convert attributes to list — attribute_tibble_to_list","text":"df tibble/data.frame. First column original value, second new label original name original attribute new new naming","code":""},{"path":"/reference/attribute_tibble_to_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to convert attributes to list — attribute_tibble_to_list","text":"list object","code":""},{"path":"/reference/attribute_tibble_to_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to convert attributes to list — attribute_tibble_to_list","text":"","code":"if (FALSE) { attributes <- tribble(~Census_stat, ~ Group,         \"Age_years_60_males\",\"60 year old male\",          \"Age (Years): 60_males\",\"60 year old male\",          \"Age_years_60_males\",\"60 year old female\",          \"Age (Years): 60_females\",\"60 year old female\")          attribute_tibble_to_list(attributes)  }"},{"path":"/reference/calculate_percentage.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to convert attributes to list — calculate_percentage","title":"Helper function to convert attributes to list — calculate_percentage","text":"Little helper function converts tibble list vectors, expected attributes input get_census_summary()","code":""},{"path":"/reference/calculate_percentage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to convert attributes to list — calculate_percentage","text":"","code":"calculate_percentage(   df,   key_col,   value_col,   key_value = \"Total\",   percentage_scale = 1 )"},{"path":"/reference/calculate_percentage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to convert attributes to list — calculate_percentage","text":"df data frame key_col name column containing \"Total Label\" value_col name column containing values key_value total label percentage_scale 1 percentage presented scale 0-1, 100 shown 0%-100%","code":""},{"path":"/reference/calculate_percentage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to convert attributes to list — calculate_percentage","text":"list object","code":""},{"path":"/reference/census_datapacks.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to download  data — census_datapacks","title":"Helper function to download  data — census_datapacks","text":"Helper function download  data","code":""},{"path":"/reference/census_datapacks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to download  data — census_datapacks","text":"","code":"census_datapacks()"},{"path":"/reference/census_datapacks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to download  data — census_datapacks","text":"nothing","code":""},{"path":"/reference/data_census_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to update/download  data — data_census_delete","title":"Helper function to update/download  data — data_census_delete","text":"Helper function update/download  data","code":""},{"path":"/reference/data_census_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to update/download  data — data_census_delete","text":"","code":"data_census_delete(file = NULL)"},{"path":"/reference/data_census_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to update/download  data — data_census_delete","text":"file delete - defaults (provide full path, can obtain data_census_info)","code":""},{"path":"/reference/data_census_delete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to update/download  data — data_census_delete","text":"nothing","code":""},{"path":"/reference/data_census_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to download  data — data_census_download","title":"Helper function to download  data — data_census_download","text":"Helper function download  data","code":""},{"path":"/reference/data_census_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to download  data — data_census_download","text":"","code":"data_census_download(   download_dir,   census_year = NULL,   download_method = \"wget\" )"},{"path":"/reference/data_census_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to download  data — data_census_download","text":"download_dir Full path download census files (required) census_year census year download (default ) download_method method pass download.file() (\"wget\" default)","code":""},{"path":"/reference/data_census_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to download  data — data_census_download","text":"nothing","code":""},{"path":"/reference/data_census_import.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to update/download  data — data_census_import","title":"Helper function to update/download  data — data_census_import","text":"Helper function update/download  data","code":""},{"path":"/reference/data_census_import.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to update/download  data — data_census_import","text":"","code":"data_census_import(file)"},{"path":"/reference/data_census_import.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to update/download  data — data_census_import","text":"file file import cache","code":""},{"path":"/reference/data_census_import.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to update/download  data — data_census_import","text":"nothing","code":""},{"path":"/reference/data_census_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to update/download  data — data_census_info","title":"Helper function to update/download  data — data_census_info","text":"Helper function update/download  data","code":""},{"path":"/reference/data_census_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to update/download  data — data_census_info","text":"","code":"data_census_info()"},{"path":"/reference/data_census_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to update/download  data — data_census_info","text":"nothing","code":""},{"path":"/reference/find_census_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to find cache folder — find_census_cache","title":"Helper function to find cache folder — find_census_cache","text":"Helper function find cache folder","code":""},{"path":"/reference/find_census_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to find cache folder — find_census_cache","text":"","code":"find_census_cache()"},{"path":"/reference/find_census_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to find cache folder — find_census_cache","text":"nothing","code":""},{"path":"/reference/get_census_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get census data. — get_census_data","title":"Get census data. — get_census_data","text":"function extracts table files data pack (given tables geo structure), collate together list(), return. default save processed tables cache folder (parquet files), use subsquent calls.","code":""},{"path":"/reference/get_census_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get census data. — get_census_data","text":"","code":"get_census_data(   census_table,   geo_structure,   selected_years = list_census_years(),   ignore_cache = FALSE,   collect_data = FALSE,   attr = NULL )"},{"path":"/reference/get_census_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get census data. — get_census_data","text":"census_table list tables, format output list_census_tables() geo_structure vector strings geo structures (e.g. SA1,LGA,CED) selected_years years filter ignore_cache TRUE, ignore cached files collect_data TRUE  return data. FALSE (default) , return arrow bindings cached files attr attributes filter ","code":""},{"path":"/reference/get_census_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get census data. — get_census_data","text":"data frame data file, filtered division election year","code":""},{"path":"/reference/get_census_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get census data. — get_census_data","text":"","code":"if (FALSE) { data <- get_census_data(census_table = list_census_tables(\"04\"),                         geo_structure = \"LGA\")  names(data) }"},{"path":"/reference/get_census_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a particular data point across census — get_census_summary","title":"Get a particular data point across census — get_census_summary","text":"Extracts particular data point statistics census data packs, filterable particular geographical units. Provides option express values percentage another data point.","code":""},{"path":"/reference/get_census_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a particular data point across census — get_census_summary","text":"","code":"get_census_summary(   table_number = NULL,   geo_structure = NULL,   attribute,   geo_unit_names = NULL,   geo_unit_codes = NULL,   selected_years = list_census_years(),   reference_total = NULL,   percentage_scale = 1,   ignore_cache = FALSE,   data_source = NULL,   data_collected = FALSE,   census_table = NULL )"},{"path":"/reference/get_census_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a particular data point across census — get_census_summary","text":"table_number number selected table geo_structure vector strings geo structures (e.g. SA1,LGA,CED) attribute attribute geo_unit_names geo unit names geo_unit_codes geo unit codes selected_years years filter reference_total reference total percentage_scale 1 percentage presented scale 0-1, 100 shown 0%-100% ignore_cache TRUE, ignore cached files data_source result get_census_data (ignore parameters provided) data_collected TRUE data_source dataset, FALSE  DB,arrow binding census_table output list_census_table()","code":""},{"path":"/reference/get_census_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a particular data point across census — get_census_summary","text":"data frame data file, filtered division election year","code":""},{"path":[]},{"path":"/reference/list_census_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get names of attributes for a given census tables, across all time — list_census_attributes","title":"Get names of attributes for a given census tables, across all time — list_census_attributes","text":"Get list available geopgrahies, filterable type name.","code":""},{"path":"/reference/list_census_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get names of attributes for a given census tables, across all time — list_census_attributes","text":"","code":"list_census_attributes(number = NULL, attribute_regex = NULL)"},{"path":"/reference/list_census_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get names of attributes for a given census tables, across all time — list_census_attributes","text":"number vector containing one table numbers attribute_regex string regular expression filter attribute names","code":""},{"path":"/reference/list_census_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get names of attributes for a given census tables, across all time — list_census_attributes","text":"tibble, showing geo type, available year","code":""},{"path":"/reference/list_census_attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get names of attributes for a given census tables, across all time — list_census_attributes","text":"","code":"if (FALSE) { # Get list of all divisions list_census_attributes()  }"},{"path":"/reference/list_census_geo.html","id":null,"dir":"Reference","previous_headings":"","what":"Get census geographies, filterable — list_census_geo","title":"Get census geographies, filterable — list_census_geo","text":"Get list available geographies, filterable type name.","code":""},{"path":"/reference/list_census_geo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get census geographies, filterable — list_census_geo","text":"","code":"list_census_geo(geo_types = NULL, geo_names = NULL, geo_name_regex = NULL)"},{"path":"/reference/list_census_geo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get census geographies, filterable — list_census_geo","text":"geo_types vector containing one geography types (.e. \"STE\",\"CED\",\"SA1\" ). NULL default. geo_names vector containing one geography names (.e. \"Melbourne\", \"Yarra\",\"Stonnington\" LGAs). NULL default. geo_name_regex string regular expression filter geograhpy names (.e. elements starting M : \"$M\")","code":""},{"path":"/reference/list_census_geo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get census geographies, filterable — list_census_geo","text":"tibble, showing geo type, available year","code":""},{"path":"/reference/list_census_geo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get census geographies, filterable — list_census_geo","text":"","code":"if (FALSE) { # Get list of all Commonwealth electoral divisions and Local Government Areas that start with \"Mel\" list_census_geo(geo_types=c(\"CED\",\"LGA\"),geo_name_regex=\"^Mel\")  }"},{"path":"/reference/list_census_geo_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"List if a geo structure is available for a particular table , in a particular year — list_census_geo_tables","title":"List if a geo structure is available for a particular table , in a particular year — list_census_geo_tables","text":"List geo structure available particular table , particular year","code":""},{"path":"/reference/list_census_geo_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List if a geo structure is available for a particular table , in a particular year — list_census_geo_tables","text":"","code":"list_census_geo_tables(year = NULL, geo = NULL, table_number = NULL)"},{"path":"/reference/list_census_geo_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List if a geo structure is available for a particular table , in a particular year — list_census_geo_tables","text":"year vector years geo vector geo structure table_number table number","code":""},{"path":"/reference/list_census_geo_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List if a geo structure is available for a particular table , in a particular year — list_census_geo_tables","text":"tibble","code":""},{"path":"/reference/list_census_geo_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List if a geo structure is available for a particular table , in a particular year — list_census_geo_tables","text":"","code":"if (FALSE) { # Get list of all divisions list_census_geo()  }"},{"path":"/reference/list_census_geo_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Geography types. — list_census_geo_types","title":"Get Geography types. — list_census_geo_types","text":"simple function listing geography types (e.g. SAx, CED, etc.), data pack imported.","code":""},{"path":"/reference/list_census_geo_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Geography types. — list_census_geo_types","text":"","code":"list_census_geo_types()"},{"path":"/reference/list_census_geo_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Geography types. — list_census_geo_types","text":"tibble, showing geotype, available year","code":""},{"path":"/reference/list_census_geo_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Geography types. — list_census_geo_types","text":"","code":"if (FALSE) { # Get list of all divisions list_census_geo_types()  }"},{"path":"/reference/list_census_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Get census geographies, filterable — list_census_tables","title":"Get census geographies, filterable — list_census_tables","text":"Get list available geopgrahies, filterable type name.","code":""},{"path":"/reference/list_census_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get census geographies, filterable — list_census_tables","text":"","code":"list_census_tables(number = NULL, table_name_regex = NULL)"},{"path":"/reference/list_census_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get census geographies, filterable — list_census_tables","text":"number vector containing one table numbers table_name_regex string regular expression filter table names (.e. elements containing Country : \"Country\")","code":""},{"path":"/reference/list_census_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get census geographies, filterable — list_census_tables","text":"tibble, showing geo type, available year","code":""},{"path":"/reference/list_census_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get census geographies, filterable — list_census_tables","text":"","code":"if (FALSE) { # Get list of all divisions list_census_geo()  }"},{"path":"/reference/list_census_years.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Census years. — list_census_years","title":"Get Census years. — list_census_years","text":"simple function listing Census years included package, data pack imported.","code":""},{"path":"/reference/list_census_years.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Census years. — list_census_years","text":"","code":"list_census_years(mode = \"available\")"},{"path":"/reference/list_census_years.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Census years. — list_census_years","text":"mode Either \"listed\" \"available","code":""},{"path":"/reference/list_census_years.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Census years. — list_census_years","text":"vector years","code":""},{"path":"/reference/list_census_years.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Census years. — list_census_years","text":"","code":"if (FALSE) { # Get list of all divisions list_census_years()  }"},{"path":"/reference/remove_census_cache_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to delete all csv in cache — remove_census_cache_csv","title":"Helper function to delete all csv in cache — remove_census_cache_csv","text":"Helper function delete csv cache","code":""},{"path":"/reference/remove_census_cache_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to delete all csv in cache — remove_census_cache_csv","text":"","code":"remove_census_cache_csv()"},{"path":"/reference/remove_census_cache_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to delete all csv in cache — remove_census_cache_csv","text":"nothing","code":""}]
